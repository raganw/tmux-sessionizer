name: Semantic Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_PAT || secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install semantic-release and cargo-edit
        run: |
          npm install -g semantic-release@^23.0.0 \
            @semantic-release/changelog@^6.0.3 \
            @semantic-release/commit-analyzer@^12.0.0 \
            @semantic-release/exec@^6.0.3 \
            @semantic-release/git@^10.0.1 \
            @semantic-release/github@^10.0.0 \
            @semantic-release/release-notes-generator@^13.0.0
          cargo install cargo-edit

      - name: Create semantic-release config
        run: |
          cat > .releaserc.json << 'EOF'
          {
            "branches": ["main"],
            "plugins": [
              "@semantic-release/commit-analyzer",
              "@semantic-release/release-notes-generator",
              "@semantic-release/changelog",
              [
                "@semantic-release/exec",
                {
                  "prepareCmd": "cargo set-version ${nextRelease.version} && cargo check --quiet"
                }
              ],
              [
                "@semantic-release/git",
                {
                  "assets": ["Cargo.toml", "Cargo.lock", "CHANGELOG.md"],
                  "message": "chore(release): bump version to ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
                }
              ],
              "@semantic-release/github"
            ],
            "preset": "conventionalcommits"
          }
          EOF

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_PAT || secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
        run: npx semantic-release

      - name: Clean up temporary config
        if: always()
        run: rm -f .releaserc.json

      - name: Handle errors
        if: failure()
        run: |
          echo "❌ Semantic release workflow failed"
          echo ""
          echo "If you see permission errors, ensure that:"
          echo "1. RELEASE_PAT secret is configured with a Personal Access Token"
          echo "2. The PAT has 'contents: write' and 'metadata: read' permissions"
          echo "3. The PAT is associated with a user that can bypass branch protection"
          echo ""
          echo "To create a PAT:"
          echo "1. Go to GitHub Settings → Developer settings → Personal access tokens → Fine-grained tokens"
          echo "2. Create a token with 'Contents' write permission for this repository"
          echo "3. Add it as a repository secret named 'RELEASE_PAT'"
          exit 1