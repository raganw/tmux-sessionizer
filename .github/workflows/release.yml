name: Release
on:
  push:
    tags:
      - "v*"

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Extract version from tag
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

  build-release:
    name: Build Release (${{ matrix.platform.name }})
    needs: create-release
    runs-on: ${{ matrix.platform.os }}
    strategy:
      matrix:
        platform:
          - name: linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: tmux-sessionizer
            asset_name: tmux-sessionizer-${{ needs.create-release.outputs.version }}-x86_64-linux
          - name: macos-x86_64
            os: macos-13
            target: x86_64-apple-darwin
            binary_name: tmux-sessionizer
            asset_name: tmux-sessionizer-${{ needs.create-release.outputs.version }}-x86_64-macos
          - name: macos-arm64
            os: macos-14
            target: aarch64-apple-darwin
            binary_name: tmux-sessionizer
            asset_name: tmux-sessionizer-${{ needs.create-release.outputs.version }}-arm64-macos

    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.platform.target }}
          override: true

      - name: Install dependencies (Linux)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config

      - name: Install dependencies (macOS)
        if: matrix.platform.os == 'macos-latest'
        run: |
          brew install openssl@3
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV

      - name: Build release binary
        run: |
          cargo build --release --target ${{ matrix.platform.target }}

      - name: Prepare binary
        run: |
          mkdir -p release
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.platform.target }}/release/${{ matrix.platform.binary_name }}.exe release/
          else
            cp target/${{ matrix.platform.target }}/release/${{ matrix.platform.binary_name }} release/
          fi

      - name: Create archive
        run: |
          cd release
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            7z a -tzip ${{ matrix.platform.asset_name }}.zip ${{ matrix.platform.binary_name }}.exe
          else
            tar -czvf ${{ matrix.platform.asset_name }}.tar.gz ${{ matrix.platform.binary_name }}
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.asset_name }}
          path: ./release/${{ matrix.platform.asset_name }}.${{ matrix.platform.os == 'windows-latest' && 'zip' || 'tar.gz' }}

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./release/${{ matrix.platform.asset_name }}.${{ matrix.platform.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_name: ${{ matrix.platform.asset_name }}.${{ matrix.platform.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_content_type: ${{ matrix.platform.os == 'windows-latest' && 'application/zip' || 'application/gzip' }}

  create-universal-macos:
    name: Create Universal macOS Binary
    needs: [create-release, build-release]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download x86_64 binary
        uses: actions/download-artifact@v4
        with:
          name: tmux-sessionizer-${{ needs.create-release.outputs.version }}-x86_64-macos
          path: ./x86_64

      - name: Download arm64 binary
        uses: actions/download-artifact@v4
        with:
          name: tmux-sessionizer-${{ needs.create-release.outputs.version }}-arm64-macos
          path: ./arm64

      - name: Extract binaries
        run: |
          mkdir -p universal
          tar -xf ./x86_64/tmux-sessionizer-${{ needs.create-release.outputs.version }}-x86_64-macos.tar.gz -C ./x86_64
          tar -xf ./arm64/tmux-sessionizer-${{ needs.create-release.outputs.version }}-arm64-macos.tar.gz -C ./arm64

      - name: Create universal binary
        run: |
          lipo -create ./x86_64/tmux-sessionizer ./arm64/tmux-sessionizer -output ./universal/tmux-sessionizer
          chmod +x ./universal/tmux-sessionizer

      - name: Create archive
        run: |
          cd universal
          tar -czvf tmux-sessionizer-${{ needs.create-release.outputs.version }}-universal-macos.tar.gz tmux-sessionizer

      - name: Upload universal binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./universal/tmux-sessionizer-${{ needs.create-release.outputs.version }}-universal-macos.tar.gz
          asset_name: tmux-sessionizer-${{ needs.create-release.outputs.version }}-universal-macos.tar.gz
          asset_content_type: application/gzip

  update-homebrew-tap:
    name: Update Homebrew Tap
    needs: [create-release, create-universal-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout homebrew tap
        uses: actions/checkout@v4
        with:
          repository: your-username/homebrew-tap
          token: ${{ secrets.TAP_REPO_TOKEN }}
          path: homebrew-tap

      - name: Update formula
        run: |
          VERSION=${{ needs.create-release.outputs.version }}
          SHA=$(curl -sL https://github.com/${{ github.repository }}/releases/download/v${VERSION}/tmux-sessionizer-${VERSION}-universal-macos.tar.gz | sha256sum | cut -d ' ' -f 1)

          cat > homebrew-tap/Formula/tmux-sessionizer.rb << EOF
          class TmuxSessionizer < Formula
            desc "A tmux session manager written in Rust"
            homepage "https://github.com/${{ github.repository }}"
            url "https://github.com/${{ github.repository }}/releases/download/v${VERSION}/tmux-sessionizer-${VERSION}-universal-macos.tar.gz"
            sha256 "${SHA}"
            version "${VERSION}"
            
            depends_on "tmux"
            
            def install
              bin.install "tmux-sessionizer"
            end
            
            test do
              system "#{bin}/tmux-sessionizer", "--version"
            end
          end
          EOF

      - name: Commit and push changes
        run: |
          cd homebrew-tap
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add Formula/tmux-sessionizer.rb
          git commit -m "Update tmux-sessionizer to v${{ needs.create-release.outputs.version }}"
          git push
