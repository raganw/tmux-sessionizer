name: CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

env:
  CARGO_TERM_COLOR: always
jobs:
  build_and_test_linux:
    name: Build & Test (Linux)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install OpenSSL
        run: sudo apt-get install -y libssl-dev
      - name: Build
        run: cargo build --verbose
      - name: Run tests
        run: cargo test --verbose
      - name: Run clippy
        run: cargo clippy -- -W clippy::pedantic -D warnings
      - name: Check formatting
        run: cargo fmt -- --check
      # - name: Security audit # Uncomment if cargo-audit is added
      #   run: cargo audit
  build_and_test_macos:
    name: Build & Test (macOS ${{ matrix.target }})
    runs-on: macos-latest # GitHub Actions uses macos-14 (ARM) or macos-13 (Intel) based on availability, but we specify target
    strategy:
      matrix:
        target: [x86_64-apple-darwin, aarch64-apple-darwin]
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - name: Set up OpenSSL
        run: |
          brew install pkgconfig openssl
          # echo "OPENSSL_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
          # echo "OPENSSL_LIB_DIR=$(brew --prefix openssl)/lib" >> $GITHUB_ENV
          # echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl)/include" >> $GITHUB_ENV
          # echo "PKG_CONFIG_PATH=$(brew --prefix openssl)/lib/pkgconfig" >> $GITHUB_ENV
          shell: bash
      - name: Build
        run: cargo build --verbose --target ${{ matrix.target }}
      - name: Run tests
        # Note: Running tests for cross-compiled targets might require specific setup
        # If tests fail, consider running them only on native architecture or using QEMU
        # For now, we assume tests can run or are architecture-independent
        # If specific tests need hardware access, they might need conditional compilation or execution
        run: cargo test --verbose --target ${{ matrix.target }}
      - name: Run clippy
        run: cargo clippy --target ${{ matrix.target }} -- -W clippy::pedantic -D warnings
      - name: Check formatting
        run: cargo fmt -- --check
      # - name: Security audit # Uncomment if cargo-audit is added
      #   run: cargo audit
