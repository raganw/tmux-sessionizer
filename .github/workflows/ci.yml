name: CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

env:
  CARGO_TERM_COLOR: always
jobs:
  lint-commits:
    name: Lint Commit Messages
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install commitlint
        run: |
          npm install -g @commitlint/cli @commitlint/config-conventional

      - name: Create commitlint config
        run: |
          cat > commitlint.config.js << 'EOF'
          module.exports = {
            extends: ['@commitlint/config-conventional'],
            rules: {
              'type-enum': [
                2,
                'always',
                [
                  'build',
                  'chore',
                  'ci',
                  'docs',
                  'feat',
                  'fix',
                  'perf',
                  'refactor',
                  'revert',
                  'style',
                  'test'
                ]
              ],
              'subject-case': [2, 'never', ['start-case', 'pascal-case', 'upper-case']],
              'subject-empty': [2, 'never'],
              'subject-full-stop': [2, 'never', '.'],
              'header-max-length': [2, 'always', 100]
            }
          };
          EOF

      - name: Lint commit messages
        run: npx commitlint --from ${{ github.event.before }} --to ${{ github.event.after }} --verbose --config commitlint.config.js

      - name: Clean up temporary config
        if: always()
        run: rm -f commitlint.config.js
  build_and_test_linux:
    name: Build & Test (Linux)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install OpenSSL
        run: sudo apt-get install -y libssl-dev
      - name: Build
        run: cargo build --verbose
      - name: Run tests
        run: cargo test --verbose
      - name: Run clippy
        run: cargo clippy -- -W clippy::pedantic -D warnings
      - name: Check formatting
        run: cargo fmt -- --check
      # - name: Security audit # Uncomment if cargo-audit is added
      #   run: cargo audit
  build_and_test_macos_intel:
    name: Build & Test (macOS x86_64-apple-darwin)
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Set up OpenSSL for target architecture
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$OPENSSL_LIB_DIR/pkgconfig" >> $GITHUB_ENV
        shell: bash
      - name: Build
        run: cargo build --verbose
      - name: Run tests
        run: cargo test --verbose
      - name: Run clippy
        run: cargo clippy -- -W clippy::pedantic -D warnings
      - name: Check formatting
        run: cargo fmt -- --check
  build_and_test_macos_arm:
    name: Build & Test (macOS aarch64-apple-darwin)
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Set up OpenSSL for target architecture
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV
          echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$OPENSSL_LIB_DIR/pkgconfig" >> $GITHUB_ENV
        shell: bash
      - name: Build
        run: cargo build --verbose
      - name: Run tests
        run: cargo test --verbose
      - name: Run clippy
        run: cargo clippy -- -W clippy::pedantic -D warnings
      - name: Check formatting
        run: cargo fmt -- --check
